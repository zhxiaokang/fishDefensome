import pandas as pd
configfile: "configs/config_main.yaml"

samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
trimmed = config["TRIMMED"]
if trimmed:
    input_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/trim"
else:
    input_path = config["READSPATH"]
key = config["KEY"]
end = config["END"]
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/genome"
final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"] + "/genome"
alignmentQC = config["alignmentQC"]

rule end:
    input:
        report = final_path + "/report_align_count.html"

if end == "pair":
    rule getReads:
        output:
            forward = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            reverse = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("scp -i {params.key} {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.forward}"),
            shell("scp -i {params.key} {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.reverse}")

else:
    rule getReads:
        output:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz")
        params:
            key = key,
            input_path = input_path
        shell:
            """
            shopt -s extglob
            scp -i {params.key} {params.input_path}/{wildcards.sample}?(.*).f*q.gz {output.read}
            """

rule indexGenome:
    input:
        genome = config["GENOME"]
    output:
        indexes = directory(intermediate_path + "/indexes"),
        splicesites = intermediate_path + "/splicesites.txt"
    params:
        index = intermediate_path + "/indexes/index"
    shell:
        "mkdir {output.indexes} && hisat2-build -p {config[NCORE]} {input.genome} {params.index}"
        "&& hisat2_extract_splice_sites.py {config[ANNOTATION]} > {output.splicesites}"

if end == "pair":
    rule alignment:
        input:
            indexes = directory(intermediate_path + "/indexes"),
            splicesites = intermediate_path + "/splicesites.txt",
            forward = intermediate_path + "/reads/{sample}_forward.fastq.gz",
            reverse = intermediate_path + "/reads/{sample}_reverse.fastq.gz"
        output:
            sam = temp(intermediate_path + "/samFile/{sample}.sam"),
            bam = temp(intermediate_path + "/bamFile/{sample}.bam")
        params:
            index = intermediate_path + "/indexes/index"
        benchmark:
            intermediate_path + "/benchmarks/{sample}.hisat2.benchmark.txt"
        run:
            shell("hisat2 -p {config[NCORE]} --known-splicesite-infile {input.splicesites} -x {params.index} -1 {input.forward} -2 {input.reverse} -S {output.sam}")
            shell("samtools view -@ {config[NCORE]} -b -S {output.sam} > {output.bam}")
else:
    rule alignment:
        input:
            indexes = directory(intermediate_path + "/indexes"),
            splicesites = intermediate_path + "/splicesites.txt",
            forward = intermediate_path + "/reads/{sample}.fastq.gz"
        output:
            sam = temp(intermediate_path + "/samFile/{sample}.sam"),
            bam = temp(intermediate_path + "/bamFile/{sample}.bam")
        params:
            index = intermediate_path + "/indexes/index"
        benchmark:
            intermediate_path + "/benchmarks/{sample}.hisat2.benchmark.txt"
        run:
            shell("hisat2 -p {config[NCORE]} --known-splicesite-infile {input.splicesites} -x {params.index} -U {input.forward} -S {output.sam}")
            shell("samtools view -@ {config[NCORE]} -b -S {output.sam} > {output.bam}")

rule sortBAM:
    input:
        bam = intermediate_path + "/bamFile/{sample}.bam"
    output:
        sort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
    shell:
        "samtools sort -@ {config[NCORE]} {input.bam} -o {output.sort}"

rule featureCount:
    input:
        sort = intermediate_path + "/bamFileSort/{sample}.sort.bam",
        annotation = config["ANNOTATION"]
    output:
        count = final_path + "/countFile/{sample}_count.tsv",
        count_summary = final_path + "/countFile/{sample}_count.tsv.summary"
    run:
        if config["COUNTER"]=="featureCounts":
            if config["END"]=="pair":
                shell("featureCounts -p -T {config[NCORE]} -t exon -g {config[ATTRIBUTE]} -a {input.annotation} -o {output.count} {input.sort} && tail -n +3 {output.count} | cut -f1,7 > temp.{wildcards.sample} && mv temp.{wildcards.sample} {output.count}")
            else:
                shell("featureCounts -T {config[NCORE]} -t exon -g {config[ATTRIBUTE]} -a {input.annotation} -o {output.count} {input.sort} && tail -n +3 {output.count} | cut -f1,7 > temp.{wildcards.sample} && mv temp.{wildcards.sample} {output.count}")
        elif config["COUNTER"]=="htseq-count":
            shell("htseq-count -f bam -i {config[ATTRIBUTE]} -s no -t exon {input.sort} {input.annotation} | sed '/^__/ d' > {output.count}")

if alignmentQC:
    rule alignmentQC:
        input:
            sort = intermediate_path + "/bamFileSort/{sample}.sort.bam"
        output:
            bamqc = directory(final_path + "/alignmentQC/{sample}_BAMqc")
        shell:
            "qualimap bamqc -bam {input.sort} -nt {config[NCORE]} --java-mem-size=6G -outdir {output.bamqc}"

    rule summaryReport:
        input:
            bamqc = expand(final_path + "/alignmentQC/{sample}_BAMqc", sample = samples),
            count_summary = expand(final_path + "/countFile/{sample}_count.tsv.summary", sample = samples)
        output:
            report = final_path + "/report_align_count.html"
        shell:
            "multiqc {input.bamqc} {input.count_summary} --filename {output.report}"
else:
    rule summaryReport:
        input:
            count_summary = expand(final_path + "/countFile/{sample}_count.tsv.summary", sample = samples)
        output:
            report = final_path + "/report_align_count.html"
        shell:
            "multiqc {input.count_summary} --filename {output.report}"
